use b_error::BError;
use crate::lexer;
use crate::ast;

grammar;

pub Body: ast::PartialBody = {
    <Statement*> => ast::PartialBody {
        stmts: <>,
    },
};

Statement: ast::Statement = {
    "let" <i:Ident> ":" <t:Type> "=" <l:Literal> ";" => {
        ast::Statement::Let(
            ast::Let {
                name: i,
                type_: t,
                lit: l,
            }
        )
    },
    "const" <i:Ident> ":" <t:Type> "=" <l:Literal> ";" => {
        ast::Statement::Const(
            ast::Const {
                name: i,
                type_: t,
                lit: l,
            }
        )
    },
    "return" <i:Ident> ";" => {
        ast::Statement::Return(i)
    },
};

Ident: ast::Ident = {
    "<ident>" => ast::Ident(<>.ident_string()),
};

Type: ast::Type = {
    "Int32" => ast::Type::Int32,
};

Literal: ast::Literal = {
    "<int32>" => ast::Literal::Int32(<>.lit_string()),
};

extern {
    type Location = usize;
    type Error = BError;

    enum lexer::Token {
        "fn" => lexer::Token::IdentFn,
        "let" => lexer::Token::IdentLet,
        "const" => lexer::Token::IdentConst,
        "return" => lexer::Token::IdentReturn,
        "Int32" => lexer::Token::IdentInt32,
        "<ident>" => (
            lexer::Token::Ident(_)
        ),
        ":" => (
            lexer::Token::Punctuation(
                lexer::Punctuation::Colon
            )
        ),
        ";" => (
            lexer::Token::Punctuation(
                lexer::Punctuation::Semicolon
            )
        ),
        "=" => (
            lexer::Token::Punctuation(
                lexer::Punctuation::Equals
            )
        ),
        "->" => (
            lexer::Token::Punctuation(
                lexer::Punctuation::RightArrow
            )
        ),
        "<int32>" => (
            lexer::Token::Int32(
                lexer::Int32(_)
            )
        ),
        "<paren-tree>" => lexer::Token::ParenTree(_),
        "<brace-tree>" => lexer::Token::BraceTree(_),
    }
}
