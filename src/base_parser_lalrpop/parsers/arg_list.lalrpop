use b_error::BError;
use crate::lexer;
use crate::ast;

grammar;

pub ArgList: ast::PartialArgList = {
    <Argument*> => ast::PartialArgList(<>),
};

Argument: ast::Argument = {
    <i:Ident> ":" <t:Type> "," => ast::Argument {
        name: i,
        type_: t,
    },
};

Ident: ast::Ident = {
    "<ident>" => ast::Ident(<>.ident_string()),
};

Type: ast::Type = {
    "Int32" => ast::Type::Int32,
};

extern {
    type Location = usize;
    type Error = BError;

    enum lexer::Token {
        "Int32" => lexer::Token::IdentInt32,
        "<ident>" => (
            lexer::Token::Ident(_)
        ),
        ":" => (
            lexer::Token::Punctuation(
                lexer::Punctuation::Colon
            )
        ),
        "," => (
            lexer::Token::Punctuation(
                lexer::Punctuation::Comma
            )
        ),
    }
}
