use b_deps::anyhow::Error;
use crate::lexer;
use crate::ast;

grammar;

pub Module: ast::PartialModule = {
    <Declaration*> => ast::PartialModule {
        decls: <>,
    },
};

Declaration: ast::PartialDeclaration = {
    "fn" <Function>,
};

Function: ast::PartialDeclaration = {
    <a:Ident> <b:ArgList> <c:RetDecl> <d:Body> => {
        ast::PartialDeclaration::Function(
            ast::PartialFunction {
                name: a,
                args: b,
                ret: c,
                body: d,
            }
        )
    },
};

Ident: ast::Ident = {
    "<ident>" => ast::Ident(<>.ident_string()),
};

ArgList: ast::ArgListTree = {
    "<paren-tree>" => ast::ArgListTree(ast::ParenTree(<>.tree())),
};

RetDecl: ast::RetDecl = {
    "->" <Type> => ast::RetDecl(<>),
};

Body: ast::BodyTree = {
    "<brace-tree>" => ast::BodyTree(ast::BraceTree(<>.tree())),
}

Type: ast::Type = {
    "Int32" => ast::Type::Int32,
};

extern {
    type Location = usize;
    type Error = Error;

    enum lexer::Token {
        "fn" => lexer::Token::IdentFn,
        "Int32" => lexer::Token::IdentInt32,
        "<ident>" => (
            lexer::Token::Ident(_)
        ),
        "->" => (
            lexer::Token::Punctuation(
                lexer::Punctuation::RightArrow
            )
        ),
        "<paren-tree>" => lexer::Token::ParenTree(_),
        "<brace-tree>" => lexer::Token::BraceTree(_),
    }
}
