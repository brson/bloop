use b_error::BError;
use crate::lexer;
use crate::ast;

grammar;

pub Module = <Declaration*>;

Declaration: ast::Declaration = {
    "fn" <Function>,
};

Function: ast::Declaration = {
    <a:Ident> <b:ArgList> <c:RetDecl> <d:Body> => {
        ast::Declaration::Function(
            ast::Function {
                name: a,
                args: b,
                ret: c,
                body: d,
            }
        )
    },
};

Ident: ast::Ident = {
    "<ident>" => panic!(),
};

ArgList: ast::ArgList = {
    "<arg-list>" => panic!(),
};

RetDecl: ast::RetDecl = {
    "->" Type => panic!(),
};

Body: ast::Body = {
    "<body>" => panic!(),
}

Type: ast::Type = {
    "I32" => panic!(),
};

extern {
    type Location = usize;
    type Error = BError;

    enum lexer::ThingOrTree {
        "fn" => (
            lexer::ThingOrTree::Thing(
                lexer::Thing::Ident(_)
            )
        ),
        "I32" => (
            lexer::ThingOrTree::Thing(
                lexer::Thing::Ident(_)
            )
        ),
        "->" => (
            lexer::ThingOrTree::Thing(
                lexer::Thing::Punctuation(
                    lexer::Punctuation::RightArrow
                )
            )
        ),       
        "<ident>" => (
            lexer::ThingOrTree::Thing(
                lexer::Thing::Ident(_)
            )
        ),
        "<arg-list>" => (
            lexer::ThingOrTree::Tree(
                lexer::Tree(
                    lexer::TreeType::Paren,
                    _
                )
            )
        ),
        "<body>" => (
            lexer::ThingOrTree::Tree(
                lexer::Tree(
                    lexer::TreeType::Brace,
                    _
                )
            )
        ),
    }
}
